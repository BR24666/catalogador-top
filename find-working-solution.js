#!/usr/bin/env node

/**
 * SCRIPT PARA ENCONTRAR SOLU√á√ÉO FUNCIONAL
 */

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes
const SUPABASE_URL = 'https://lgddsslskhzxtpjathjr.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxnZGRzc2xza2h6eHRwamF0aGpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5OTQ1ODcsImV4cCI6MjA2MDU3MDU4N30._hnImYIRQ_102sY0X_TAWBKS1J71SpXt1Xjr2HvJIws';

// Inicializar cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

class WorkingSolutionFinder {
    constructor() {
        this.workingSolutions = [];
    }

    /**
     * Testar inser√ß√£o com dados m√≠nimos
     */
    async testMinimalInsert(tableName) {
        console.log(`\nüß™ Testando inser√ß√£o m√≠nima na tabela: ${tableName}`);
        
        const testData = {
            pair: 'BTCUSDT',
            timestamp: new Date().toISOString()
        };

        try {
            const { data, error } = await supabase
                .from(tableName)
                .insert(testData);

            if (error) {
                console.log(`‚ùå Erro: ${error.message}`);
                return false;
            } else {
                console.log(`‚úÖ Inser√ß√£o m√≠nima funcionou!`);
                this.workingSolutions.push({
                    table: tableName,
                    structure: 'm√≠nima',
                    fields: Object.keys(testData)
                });
                return true;
            }
        } catch (err) {
            console.log(`‚ùå Erro: ${err.message}`);
            return false;
        }
    }

    /**
     * Testar inser√ß√£o com dados de vela
     */
    async testCandleInsert(tableName) {
        console.log(`\nüß™ Testando inser√ß√£o de vela na tabela: ${tableName}`);
        
        const testData = {
            pair: 'BTCUSDT',
            timeframe: '1m',
            timestamp: new Date().toISOString(),
            open: 50000.00,
            high: 50100.00,
            low: 49900.00,
            close: 50050.00,
            volume: 100.0
        };

        try {
            const { data, error } = await supabase
                .from(tableName)
                .insert(testData);

            if (error) {
                console.log(`‚ùå Erro: ${error.message}`);
                return false;
            } else {
                console.log(`‚úÖ Inser√ß√£o de vela funcionou!`);
                this.workingSolutions.push({
                    table: tableName,
                    structure: 'vela',
                    fields: Object.keys(testData)
                });
                return true;
            }
        } catch (err) {
            console.log(`‚ùå Erro: ${err.message}`);
            return false;
        }
    }

    /**
     * Testar inser√ß√£o com dados de vela com pre√ßos
     */
    async testCandlePriceInsert(tableName) {
        console.log(`\nüß™ Testando inser√ß√£o de vela com pre√ßos na tabela: ${tableName}`);
        
        const testData = {
            pair: 'BTCUSDT',
            timeframe: '1m',
            timestamp: new Date().toISOString(),
            open_price: 50000.00,
            high_price: 50100.00,
            low_price: 49900.00,
            close_price: 50050.00,
            volume: 100.0
        };

        try {
            const { data, error } = await supabase
                .from(tableName)
                .insert(testData);

            if (error) {
                console.log(`‚ùå Erro: ${error.message}`);
                return false;
            } else {
                console.log(`‚úÖ Inser√ß√£o de vela com pre√ßos funcionou!`);
                this.workingSolutions.push({
                    table: tableName,
                    structure: 'vela com pre√ßos',
                    fields: Object.keys(testData)
                });
                return true;
            }
        } catch (err) {
            console.log(`‚ùå Erro: ${err.message}`);
            return false;
        }
    }

    /**
     * Testar todas as tabelas
     */
    async testAllTables() {
        console.log('üöÄ TESTANDO TODAS AS TABELAS POSS√çVEIS');
        console.log('=' * 50);

        const tables = [
            'candle_data',
            'market_data',
            'trading_signals',
            'realtime_candle_data',
            'historical_candle_data'
        ];

        for (const table of tables) {
            console.log(`\nüìã Testando tabela: ${table}`);
            
            // Testar inser√ß√£o m√≠nima
            const minimalWorked = await this.testMinimalInsert(table);
            
            if (!minimalWorked) {
                // Se inser√ß√£o m√≠nima n√£o funcionou, testar inser√ß√£o de vela
                const candleWorked = await this.testCandleInsert(table);
                
                if (!candleWorked) {
                    // Se inser√ß√£o de vela n√£o funcionou, testar inser√ß√£o de vela com pre√ßos
                    await this.testCandlePriceInsert(table);
                }
            }
        }

        // Relat√≥rio final
        console.log('\n' + '=' * 50);
        console.log('üìä SOLU√á√ïES FUNCIONAIS ENCONTRADAS');
        console.log('=' * 50);
        
        if (this.workingSolutions.length > 0) {
            this.workingSolutions.forEach(solution => {
                console.log(`‚úÖ ${solution.table}: ${solution.structure}`);
                console.log(`   Campos: ${solution.fields.join(', ')}`);
            });
        } else {
            console.log('‚ùå Nenhuma solu√ß√£o funcionou');
            console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
            console.log('1. Verificar se o Supabase tem RLS desabilitado');
            console.log('2. Verificar se as tabelas existem e t√™m a estrutura correta');
            console.log('3. Verificar se a chave de API est√° correta');
            console.log('4. Verificar se o projeto Supabase est√° ativo');
        }

        console.log('\nüéØ Teste conclu√≠do!');
    }
}

// Executar teste
async function main() {
    const finder = new WorkingSolutionFinder();
    await finder.testAllTables();
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = WorkingSolutionFinder;
